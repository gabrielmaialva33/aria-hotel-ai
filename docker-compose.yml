version: '3.8'

services:
  # ARIA API Service
  aria-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aria-api
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=production
      - DATABASE_URL=postgresql://aria:aria_password@postgres:5432/aria_db
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - aria-network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: aria-postgres
    environment:
      - POSTGRES_DB=aria_db
      - POSTGRES_USER=aria
      - POSTGRES_PASSWORD=aria_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - aria-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aria-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - aria-network

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aria-celery-worker
    command: celery -A aria.core.queue worker --loglevel=info
    environment:
      - APP_ENV=production
      - DATABASE_URL=postgresql://aria:aria_password@postgres:5432/aria_db
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - aria-network

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: aria-celery-beat
    command: celery -A aria.core.queue beat --loglevel=info
    environment:
      - APP_ENV=production
      - DATABASE_URL=postgresql://aria:aria_password@postgres:5432/aria_db
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - aria-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: aria-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - aria-api
    restart: unless-stopped
    networks:
      - aria-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: aria-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - aria-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: aria-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - aria-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  aria-network:
    driver: bridge
